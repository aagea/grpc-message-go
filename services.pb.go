// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message/services.proto

package grpc_message_go // import "github.com/aagea/grpc-message-go"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import grpc_common_go "github.com/aagea/grpc-common-go"
import grpc_user_go "github.com/aagea/grpc-user-go"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessagesClient is the client API for Messages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagesClient interface {
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*grpc_common_go.Void, error)
	RecoverMessages(ctx context.Context, in *grpc_user_go.UserID, opts ...grpc.CallOption) (*MessageList, error)
}

type messagesClient struct {
	cc *grpc.ClientConn
}

func NewMessagesClient(cc *grpc.ClientConn) MessagesClient {
	return &messagesClient{cc}
}

func (c *messagesClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*grpc_common_go.Void, error) {
	out := new(grpc_common_go.Void)
	err := c.cc.Invoke(ctx, "/message.Messages/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesClient) RecoverMessages(ctx context.Context, in *grpc_user_go.UserID, opts ...grpc.CallOption) (*MessageList, error) {
	out := new(MessageList)
	err := c.cc.Invoke(ctx, "/message.Messages/RecoverMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagesServer is the server API for Messages service.
type MessagesServer interface {
	SendMessage(context.Context, *Message) (*grpc_common_go.Void, error)
	RecoverMessages(context.Context, *grpc_user_go.UserID) (*MessageList, error)
}

func RegisterMessagesServer(s *grpc.Server, srv MessagesServer) {
	s.RegisterService(&_Messages_serviceDesc, srv)
}

func _Messages_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Messages/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messages_RecoverMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_user_go.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).RecoverMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Messages/RecoverMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).RecoverMessages(ctx, req.(*grpc_user_go.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Messages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.Messages",
	HandlerType: (*MessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Messages_SendMessage_Handler,
		},
		{
			MethodName: "RecoverMessages",
			Handler:    _Messages_RecoverMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/services.proto",
}

func init() { proto.RegisterFile("message/services.proto", fileDescriptor_services_dbb82937077bc892) }

var fileDescriptor_services_dbb82937077bc892 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x87, 0x8a, 0x4b, 0x89, 0x26, 0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0xe9, 0xa7,
	0xe6, 0x95, 0x64, 0x96, 0x64, 0xc2, 0xe4, 0xa5, 0xe0, 0xfa, 0xd0, 0xc4, 0x85, 0x4b, 0x8b, 0x53,
	0x8b, 0xd0, 0x04, 0x8d, 0x0a, 0xb8, 0x38, 0x7c, 0x21, 0xca, 0x8b, 0x85, 0x74, 0xb9, 0xb8, 0x83,
	0x53, 0xf3, 0x52, 0xa0, 0x7c, 0x21, 0x01, 0x3d, 0xa8, 0x41, 0x7a, 0x50, 0x11, 0x29, 0x1e, 0x3d,
	0x88, 0x8d, 0x7a, 0x61, 0xf9, 0x99, 0x29, 0x42, 0xa6, 0x5c, 0xfc, 0x41, 0xa9, 0xc9, 0xf9, 0x65,
	0xa9, 0x45, 0x70, 0x13, 0x78, 0xf4, 0x40, 0x76, 0xe8, 0x85, 0x16, 0xa7, 0x16, 0x79, 0xba, 0x48,
	0x89, 0xa0, 0x1b, 0xe0, 0x93, 0x59, 0x5c, 0xe2, 0xa4, 0x14, 0xa5, 0x90, 0x9e, 0x59, 0x92, 0x51,
	0x9a, 0x04, 0x32, 0x4c, 0x3f, 0x31, 0x31, 0x3d, 0x35, 0x51, 0x3f, 0xbd, 0xa8, 0x20, 0x59, 0x17,
	0xaa, 0x58, 0x37, 0x3d, 0x3f, 0x89, 0x0d, 0xec, 0x38, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x74, 0x77, 0xeb, 0xee, 0x03, 0x01, 0x00, 0x00,
}
